/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2116.0) */

#ifndef BLE_CANONICAL_SERVICE_H__
#define BLE_CANONICAL_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"


/**@brief Canonical Service event type. */
typedef enum
{ 
    BLE_CANONICAL_SERVICE_RX_PORT_EVT_NOTIFICATION_ENABLED,  /**< rx_port value notification enabled event. */
    BLE_CANONICAL_SERVICE_RX_PORT_EVT_NOTIFICATION_DISABLED, /**< rx_port value notification disabled event. */
    BLE_CANONICAL_SERVICE_RX_PORT_EVT_WRITE, /**< rx_port write event. */
    BLE_CANONICAL_SERVICE_TX_PORT_EVT_NOTIFICATION_ENABLED,  /**< tx_port value notification enabled event. */
    BLE_CANONICAL_SERVICE_TX_PORT_EVT_NOTIFICATION_DISABLED, /**< tx_port value notification disabled event. */
    BLE_CANONICAL_SERVICE_TX_PORT_EVT_CCCD_WRITE, /**< tx_port CCCD write event. */
} ble_canonical_service_evt_type_t;

// Forward declaration of the ble_canonical_service_t type.
typedef struct ble_canonical_service_s ble_canonical_service_t;

/**@brief rx_port structure. */
typedef struct
{
    uint8_array_t field_1;
} ble_canonical_service_rx_port_t;
/**@brief tx_port structure. */

typedef struct
{
    uint8_array_t field_1;
} ble_canonical_service_tx_port_t;

/**@brief Canonical Service Service event. */
typedef struct
{
    ble_canonical_service_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_canonical_service_rx_port_t rx_port; /**< Holds decoded data in Write event handler. */
    } params;
} ble_canonical_service_evt_t;

/**@brief Canonical Service Service event handler type. */
typedef void (*ble_canonical_service_evt_handler_t) (ble_canonical_service_t * p_canonical_service, ble_canonical_service_evt_t * p_evt);

/**@brief Canonical Service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_canonical_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Canonical Service Service. */
    ble_canonical_service_rx_port_t ble_canonical_service_rx_port_initial_value; /**< If not NULL, initial value of the rx_port characteristic. */ 
    ble_canonical_service_tx_port_t ble_canonical_service_tx_port_initial_value; /**< If not NULL, initial value of the tx_port characteristic. */ 
} ble_canonical_service_init_t;

/**@brief Canonical Service Service structure. This contains various status information for the service.*/
struct ble_canonical_service_s
{
    ble_canonical_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Canonical Service Service. */
    uint16_t service_handle; /**< Handle of Canonical Service Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t rx_port_handles; /**< Handles related to the rx_port characteristic. */
    ble_gatts_char_handles_t tx_port_handles; /**< Handles related to the tx_port characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Canonical Service.
 *
 * @param[out]  p_canonical_service       Canonical Service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_canonical_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_canonical_service_init(ble_canonical_service_t * p_canonical_service, const ble_canonical_service_init_t * p_canonical_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_canonical_service_on_ble_evt(ble_canonical_service_t * p_canonical_service, ble_evt_t * p_ble_evt);

/**@brief Function for sending the tx_port.
 *
 * @details The application calls this function after having performed a tx_port.
 *          The tx_port data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_canonical_service                    Canonical Service Service structure.
 * @param[in]   p_tx_port               New tx_port.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_canonical_service_tx_port_send(ble_canonical_service_t * p_canonical_service, ble_canonical_service_tx_port_t * p_tx_port);

#endif //_BLE_CANONICAL_SERVICE_H__
